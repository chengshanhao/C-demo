//输出字符长度，"\\"为一字符，遇到"\0"则截断，长度为截断前字符长度
//案列：
char strs[] = "abcde\\0fghjik\0";
printf("%d\n", strlen(strs));


//字符串函数,接受数组可用指针接收，也可用数组
//案列：
char * fun(char *s){}
int main(){
char str[99]="";
char *str2;
str2=fun(str);
}


//计算结构体字节
//结构体所总占字节数
//对齐值为n,小于n的变量变成n 大于n的以本身字节算 n的取值只能有1，2，4，8，
//其它数就按照正常方法运算(第一个取0,后一位必须是前面所算的字节的倍数，不够就补)
//总字节数最大不超过正常运算值
//总字节数取其最大字节变量的最小倍数（存在共同体也看共同体里的，注意数组看其本身数据类型的字节）
//空结构体占一个字节
//**静态标识的变量不占字节
//案例
#pragma back(push)
#pragma pack(4)//对齐规则
struct jgt
{
   char a;
   short d;
   static int b;
}j;


//不同输出方式
//原则一：%d 输出本身减去十位上的数*2（30-3*2）
//原则二：%o 输出本身（30）
//原则三：%x  输出十六进制小写字母   1-7  正常输出 10对应8 11对应9 12-17 对应小写字母abcdef 其它（1a,1b.....10,11.....2a,2b）
//原则四：%X 输出十六进制大写字母
//案列
int x = 030; 
printf("x=%d,x=%o,x=%X\n", x, x, x);


//不同输出方式
//原则一：%d 输出本身（30）
//原则二：%o 输出本身加上十位上的数*2（30+3*2）
//原则三：%x  输出十六进制小写字母   1-9  正常输出  10-15 对应小写字母abcdef 26-31对应小写字母1a 1b 1c 1d 1e 1f其它（1a,1b.....10,11.....2a,2b）
//原则四：%X 输出十六进制大写字母
//案列
int x = 30; 
printf("x=%d,x=%o,x=%X\n", x, x, x);

//预处理，方法无需返回参数
//案例
#define N 3 
#define Y(n) ((N+1)*n)
int z;
z = 2 * (N + Y(5 + 1));
printf("%d", z);


//strcat函数，隐藏效果 p3为cdBCD
//原则：将后者变量值追加到前者，并返回一个指针
//案例
char p1[] = "abcd", p2[] = "ABCD", str[50] = "xyz";
char *p3 = strcat(p1 + 2, p2 + 1);
strcpy(str + 2, p3);
printf("%s", str);

***//输入的字符串结尾会带有/0且以替换原数组中同长度的字符
***//例如：
char tt[10] = "1,2,3,4,5";//1,2,3,4,5\0
scanf("%s",tt);//如果输入abc，数组内容会变为abc\03,4,5\0
strcat(tt,"6789");//追加，是在数组中第一个\0前追加


//&& & | ||的使用
//原则一：& | 从左往右，会计算左右每一个表达式 
//原则二： || 从左往右，计算左边表达式为ture,则右边表达式不再计算，反则计算右边表达式
//原则二： && 从左往右，计算左边表达式为false,则右边表达式不再计算，反则计算右边表达式
//场景一：a++ & ++b ||++c; 都会加1
//场景二：a++ | ++b ||++c; a，b加1
//场景三：a++ || ++b ||++c; a加1
//场景四：a++ && ++b ||++c; a，b加1
//案例
int a, b, c;
a = b = c = 1;
a++ && ++b||++c;




//按位与（转成二进制运算）
//运算规则：0&0=0;   0&1=0;    1&0=0;     1&1=1;
//原则一：存在负数，都以补码运算；若都为正数，按原码算
//原则二：结果（例如：1000 1010），取最后四位转十进制，所以结果为：1*2的3次方+0*2的2次方+1*2的1次方+0*2的0次方=5
//原则三：仅当都为负数（-11&-13），结果需取补码，结果变为负数，
//扩展一：正数的补码，原码，反码都相同
//扩展二：负数的补码，是在反码的基础上，再加1，而负数的反码，就是其正数的反码（同样可用原码）取反
//扩展三：负数话符号为1，正数为0 例：（11与-11）（原码：0000 1011与1000 1011）
//案例：int re = -11 & 13; 原码：1000 1011 & 0000 1101  
运算：（-11）反=1111 0100 ；（-11）补=1111 0101；
          （13）补 =（13）反=（13）原 =0000 1101 
结果：1111 0101 & 0000 1101=0000 0101=5；
所以：-11&13=5；


//按位或（转成二进制运算）
//运算规则：0^0=0；   0^1=1；   1^0=1；   1^1=1；
//原则一：存在负数，都以补码运算；若都为正数，按原码算
//原则二：结果（例如：1000 1010），取最后四位转十进制，所以结果为：1*2的3次方+0*2的2次方+1*2的1次方+0*2的0次方=5
//原则三：当存在为负数（-11||-13或-11|13），结果需取补码，结果变为负数，
//案例：int re = -11 | 13; 原码：1000 1011 & 0000 1101  
运算：（-11）反=1111 0100 ；（-11）补=1111 0101；
          （13）补 =（13）反=（13）原 =0000 1101 
第一次取补码：1111 0101 | 0000 1101=1111 1101；
第二次取补码：（1111 1101）反=1000 0010；1000 0010+1=1000 0011；
结果：1000 0011=-3
所以：-11|13=-3；


//*赋值表达式*
int a = 2, b = 0, c = 0;
//c = ((a += a -= 5), (a = -1, b + 3));//取最后括号里的最后一个数
//a = (a + 2, a + 1, a + 5,0);//取最后一个数
//a = (a += 5), (a=b, b + 3);//无最外层括号，取第一个数,若后面存在改变a的表达式，则a会发生变化
//c = a += b -= 5;//从后往前算，第一步：b-=5 b=-5; 第二步：a+=b a=a+b a=-3 第三步：c=a c=-3



/*****基础概念*****/
/*****基础概念*****/
/*****基础概念*****/
//C语言语法规定：
//字母e或E之前必须要有数字，且e或E后面的指数必须为整数。
//注意：在字母e或E的前后以及数字之间不得插入空格。

//C语言中关于合法的数值常量
//1. 八进制常量：开头必须是0，且八进制是0-7之间组成的数，例如，029就是错误的八进制表示方式。
//2. 十六进制常量：0X开头，包含字母ABCDEF，不区分大小写，例如0x与0X一样，0Xaa与0xAA，都是正确的。
//3. 实数型常量：必须有小数点，例如定义double a=1就是错误的，必须写成double a=1.0，另外写成a=1，0中间是逗号，就更是错误的了。
//4. e与E,表示以10为底数的幂数，且e与E后面必须跟整数，若是小数，也是错误的，例如3.2e1.5  ，这里1.5是小数，所以错的。

//背诵知识点：
//①函数的实参为常量时，形参和实参结合的传递方式为值传递
//②一个函数直接或间接地调用自己，称作递归调用
//③C 语言中的空语句由分号组成

//复合语句（compound statement）简称为语句块，它使用大括号把许多语句和声明组合到一起，形成单条语句。



/******易错点*****/
/******易错点*****/
/******易错点*****/
//考点 scanf("%s",&str),scanf("%s",str)
//原则一：考输入语句时，最准确的是str
//案例
char str[]="";//未指定长度，必须赋予初始值
scanf("%s",str)

//使两指针指向同一变量 &p2为内存地址  *p2为指针的值
//案例
int *p1, *p2;
p1 = *&p2;//&p2 类型是int**
int p3=**&p2;


//整数绝对值abs 小数绝对值fabs
//注意：fabs(a)%3 错误

//scanf(),gets()区别
//scanf() 不会读取空格，gets()可以

//如果存在余数则运行其表达式（只要大于0）
//if (i % 3)
{
   printf("%d", i--);
}

//数组长度比较（注意）
char x[] = "abcdefg";
char y[] = {'a','b','c','d','e','f','g'};
x>y

//置换值注意细节
void funs(int* a, int* b)
{   //只置换了指针指向
    int* c;
    c = a; a = b; b = c;
    //置换值
    int c;
    c = *a; *a = *b; *b = c;
}

//错误写法：int l[] = { 0 * 10 };哒咩

//指针指向二维数组，读取数据特殊写法（谨记）
int w[2][3] = { 1,2,3,4,5,6 }, (*pw)[3] = w; pw = w;
int y = *(w + 1)[1];// w+1将首行内存地址从0移动为1  从第数组的第二行（也就是行下标为1）开始读取数
y=*((w+1)[1]+2)//读取的是数组的第三行的第3个元素
y = *(pw + 1)[2];

//特别：
//printf("%d",printf("%d\n", printf("%d", printf("%d\n", 443))));
输出数的个数（\ne也算） //输出结果：443 41 2

//实例：&a
//一个二维数组a[2][2]={1,2,3,4},&a为其地址（注意）
//int *r=(int*)(&a+1)代表在整体上的向后一整个地址，*(r-1)为4；
//int *r=(int*)(&a-1)代表在整体上的向前一整个地址，*(r+4)为1

//注意数组越界问题
//实例一：
//若循环给str2赋值，但没有\0的结尾，当strcpy时会一直进行复值
char str1[10],str2[10];
strcpy(str1,str2);

//1.25 默认double类型

//cpntinue只出现循环体系中，switch的关键字没有它

//实例，不同计算机位数下的指针字节数
//32位计算机下，指针字节数为4，64位下是8
long long *r1 =&yu;
printf("%d",sizeof(r1));//字节为8
printf("%d\n",sizeof(*r1));//未指向指针的内存地址，字节数为其数据类型字节数

//形参指针的内存地址改变，并不影响实参
void point(char* pr) {
	pr += 3;
}
char br[4] = { 'a','b','C','d' }, * pr = br;
point(pr);
printf("%c\n", *pr);

//printf输出时易错点
//++tu，--tu以tu最后结果输出
int tu=2;
printf("%d%d%d%d", tu *= 2, ++tu, tu++,--tu);


/******各计算及库函数等方法*****/
/******各计算及库函数等方法*****/
/******各计算及库函数等方法*****/
//#include <direct.h>
//_getcwd(ss, 100);//获取当前根目录

//num的n次方，开方n为小数，n<0 返回0
//pow（num,n）

//无符号unsigned的运算
//负数的值运算方法：2^8+负数
//一个字节8位，所以char是2^8,而int的话就是2^32
unsigned char r1 = 6, r2 = -10, r3 = r1 + r2;
//r3=6+2^8-10=252
printf("%d\n",r3);


//八进制转十进制
/*int n = 0, i = 0; char s[20];
printf("请输入一个8进制数:\n"); scanf("%s", &s);
while (s[i] != '\0') {
	n = n * 8 + s[i] - '0';
	i++;
}
printf("刚输入的8进制数转化为十进制为\n%d \n", n);*/


//杨辉三角（坐标法）
int number[N][N];

for (int i = 0; i < N; i++)
{
for (int j = 0; j <= i; j++)
{
if (j==0||j==i)
{
number[i][j] = 1;
}
else
{
number[i][j] = number[i - 1][j - 1] + number[i - 1][j];
}
std::cout << number[i][j] <<" ";
}
std::cout << "\n";
}



----（重点）知识点：
//C语言源程序不能表示二进制
//整型常量和长整型常量均可用十进制、八进制、十六进制3种形式表示
//C语言中，文件由字符（字节）序列组成
//共用体占内存大小是根据其成员最大占内存大小来决定的
//%仅应用于整数
//C语言提供的实型变量有两种类型：单精度（float）和双精度（double）
//printf默认右对齐
//scanf和printf是库函数，不是C语言提供的
//64位下，指针默认8个字节
//！ > 算术运算符 > 关系运算符 > && > || > 赋值运算符
//共用体：
共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员就失去作用；
共用体变量的地址和它的各成员的地址都是同一地址；
不能对共用体变量名赋值，不能在定义共用体变量时对它初始化；
不能把共用体变量作为函数参数，也不能使函数带回共用体变量，但可以使用指向共用体变量的指针；
共用体类型可以出现在结构体类型定义中，也可以定义共用体数组。
一个共用体变量不能同时存放其所有成员
//在64位计算机中,一个字长所占字节数为8
//c语言源程序名的后缀是c
//printf是右结合性函数，操作是从右到左依次执行
//浮点类型没有==,因为其数据左右浮点，不确定，表达式结果永远是0
